name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - dev
      - feature/*
  pull_request:
    branches:
      - master
      - dev
      - feature/*

jobs:
  # Job 1: Compilation, linting, et tests
  build_and_test:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DEBUG: ${{ secrets.DEBUG }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Linting avec flake8
        run: |
          pip install flake8
          flake8 . --max-line-length=120

      - name: Collect static files
        run: |
          python manage.py collectstatic --noinput

      - name: Run tests avec pytest
        run: |
          pip install pytest pytest-cov
          pytest --cov=lettings --cov=profiles --cov-report=term-missing

      - name: Vérifier la couverture de tests
        run: |
          coverage report
          coverage html
          COVERAGE=$(coverage report | grep -oP 'TOTAL\s+\K\d+')
          if [ "$COVERAGE" -lt 80 ]; then
            echo "Coverage below 80%, aborting.";
            exit 1;
          fi

  # Job 2: Conteneurisation
  docker_build_and_push:
    runs-on: ubuntu-latest
    needs: build_and_test  # Ce job ne s'exécute que si build_and_test est réussi
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/oc_lettings_site:$GITHUB_SHA .
      
      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/oc_lettings_site:$GITHUB_SHA

      - name: Tag image with latest
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/oc_lettings_site:$GITHUB_SHA ${{ secrets.DOCKER_USERNAME }}/oc_lettings_site:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/oc_lettings_site:latest

  # Job 3: Déploiement sur Render
  deploy_to_render:
    runs-on: ubuntu-latest
    needs: docker_build_and_push
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Render CLI (v1.1.0)
        run: |
          curl -L https://github.com/render-oss/cli/releases/download/v1.1.0/cli_1.1.0_linux_amd64.zip -o render.zip
          unzip -o render.zip -d render-cli
          sudo mv render-cli/cli_v1.1.0 /usr/local/bin/render
          sudo chmod +x /usr/local/bin/render

      - name: Check Render CLI version
        run: render --version

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          CI: true
        run: |
          render deploys create ${{ secrets.RENDER_SERVICE_ID }} \
            --image docker.io/${{ secrets.DOCKER_USERNAME }}/oc_lettings_site:latest \
            --output json \
            --confirm \
            --wait
